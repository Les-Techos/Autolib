
@{
    ViewData["Title"] = "Home Page";
    Layout = "~/Views/Shared/_Layout.cshtml";
}


<div id="map">
    <!-- Ici s'affichera la carte -->
</div>

<script src="https://unpkg.com/leaflet@1.3.1/dist/leaflet.js" integrity="sha512-/Nsx9X4HebavoBvEBuyp3I7od5tA0UzAxs+j83KgC8PU0kgB4XiK4Lfe4y4cgBtaRJQEIFCW+oC506aPT2L1zw==" crossorigin=""></script>
<script type='text/javascript' src='https://unpkg.com/leaflet.markercluster@1.3.0/dist/leaflet.markercluster.js'></script>
<script src="~/js/svg-icon.js"></script>
<script type="text/javascript">
    // On initialise la latitude et la longitude de Paris (centre de la carte)
    var lat = 45.756862;
    var lon = 4.836159;
    var macarte = null;
    var stations = [];
    var markerClusters; // Servira à stocker les groupes de marqueurs
    // Nous initialisons une liste de marqueurs

    // Fonction d'initialisation de la carte
    function initMap() {
		var markers = []; // Nous initialisons la liste des marqueurs
		// Nous définissons le dossier qui contiendra les marqueurs
		@if (Model != null)
{
    @foreach (var st in Model.stations)
    {
		@:var element = {};
		@:element.id = "ID : @st.IdStation";
		@:element.Adresse = "Adresse : @st.Numero @st.Adresse @st.Ville @st.CodePostal";
		@:element.lat = @double.Parse(@st.Latitude.ToString(), new System.Globalization.CultureInfo("en-US")) /1000000;
		@:element.lon = @double.Parse(@st.Longitude.ToString(), new System.Globalization.CultureInfo("en-US")) /1000000;
        @:element.Vehc = "Nombre de véhicules disponibles : @Model.nbVechDispo[st].Count";
        @:element.nbVehc = @Model.nbVechDispo[st].Count;
        @:element.nbBornes = "Nombre de bornes disponibles : @Model.nbBornesDispo[st]";
        @:stations.push(element );

	}
}
		var iconBase = 'http://localhost/carte/icons/';
		// Créer l'objet "macarte" et l'insèrer dans l'élément HTML qui a l'ID "map"
		macarte = L.map('map').setView([lat, lon], 11);
		markerClusters = L.markerClusterGroup(); // Nous initialisons les groupes de marqueurs
		// Leaflet ne récupère pas les cartes (tiles) sur un serveur par défaut. Nous devons lui préciser où nous souhaitons les récupérer. Ici, openstreetmap.fr
		L.tileLayer('https://{s}.tile.openstreetmap.fr/osmfr/{z}/{x}/{y}.png', {
			// Il est toujours bien de laisser le lien vers la source des données
			attribution: 'données © OpenStreetMap/ODbL - rendu OSM France',
			minZoom: 1,
			maxZoom: 20
		}).addTo(macarte);
        // Nous parcourons la liste des villes
        if (navigator.geolocation) {
            navigator.geolocation.getCurrentPosition(function (position) {
                var latlng = {};
                latlng.lat = position.coords.latitude;
                latlng.lng = position.coords.longitude;
                var marker = new L.Marker.SVGMarker(latlng, { iconOptions: { color: "rgb(226,0,26)", fillOpacity: 1} }); // pas de addTo(macarte), l'affichage sera géré par la bibliothèque des clusters
            var popup = L.popup().setContent("Vous êtes ici");
            marker.bindPopup(popup);
            //marker._icon.classList.add("posClient")
            markerClusters.addLayer(marker); // Nous ajoutons le marqueur aux groupes

            markers.push(marker);
        });
        }

        for (station in stations) {
            var latlng = {};
            latlng.lat = stations[station].lat;
            latlng.lng = stations[station].lon;
            var buttonPopup = "";
            buttonPopup += stations[station].id + "<br/>" + stations[station].Adresse + "<br/>" + stations[station].Vehc + "<br/>" + stations[station].nbBornes + "<br/>";
            if (stations[station].nbVehc > 0) {
                buttonPopup += '<form method="POST" action="/Reservations"><input type = "hidden" id = "numeroStation" name = "numeroStation" value = ' + station.id + ' /><input type="submit" class="btn btn-primary" id="Reserve" name="Reserve" value="Réserver une auto ici" /></form > ';
            }
            var marker = new L.Marker.SVGMarker(latlng, { iconOptions: { color: "rgb(0,158,224)", fillOpacity: 1 } });; // pas de addTo(macarte), l'affichage sera géré par la bibliothèque des clusters
            var popup = L.popup().setContent(buttonPopup);
			marker.bindPopup(popup);
			markerClusters.addLayer(marker); // Nous ajoutons le marqueur aux groupes
			markers.push(marker); // Nous ajoutons le marqueur à la liste des marqueurs
		}

		var group = new L.featureGroup(markers); // Nous créons le groupe des marqueurs pour adapter le zoom
		macarte.fitBounds(group.getBounds().pad(0.5)); // Nous demandons à ce que tous les marqueurs soient visibles, et ajoutons un padding (pad(0.5)) pour que les marqueurs ne soient pas coupés
		macarte.addLayer(markerClusters);
	}
              window.onload = function () {


                  // Fonction d'initialisation qui s'exécute lorsque le DOM est chargé
                  initMap();
              };
</script>
